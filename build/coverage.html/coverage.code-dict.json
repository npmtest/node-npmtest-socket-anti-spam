{"/home/travis/build/npmtest/node-npmtest-socket-anti-spam/test.js":"/* istanbul instrument in package npmtest_socket_anti_spam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket-anti-spam/lib.npmtest_socket_anti_spam.js":"/* istanbul instrument in package npmtest_socket_anti_spam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socket_anti_spam = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socket_anti_spam = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socket-anti-spam/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socket-anti-spam && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socket_anti_spam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socket_anti_spam\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socket_anti_spam.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_socket_anti_spam.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socket_anti_spam.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_socket_anti_spam.__dirname + '/lib.npmtest_socket_anti_spam.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket-anti-spam/node_modules/socket-anti-spam/antispam.js":"'use strict'\r\n\r\nvar moment = require('moment')\r\nvar events = require('events')\r\nvar eventEmitter = new events.EventEmitter()\r\n\r\nvar not = function(val) {\r\n  return (val == null || val === false || val == undefined)\r\n}\r\n\r\nvar defaultOptions = {\r\n  banTime: 60,\r\n  kickThreshold: 10,\r\n  kickTimesBeforeBan: 3,\r\n  banning: true,\r\n  heartBeatStale: 40,\r\n  heartBeatCheck: 4,\r\n}\r\nvar options = defaultOptions\r\nvar users = {}\r\nvar heartbeats = {}\r\n\r\nexports.init = function(sets) {\r\n  if (not(sets.banTime))\r\n    sets.banTime = defaultOptions.banTime\r\n  if (not(sets.kickThreshold))\r\n    sets.kickThreshold = defaultOptions.kickThreshold\r\n  if (not(sets.kickTimesBeforeBan))\r\n    sets.kickTimesBeforeBan = defaultOptions.kickTimesBeforeBan\r\n  if (not(sets.banning))\r\n    sets.banning = defaultOptions.banning\r\n  if (not(sets.heartBeatStale))\r\n    sets.heartBeatStale = defaultOptions.heartBeatStale\r\n  if (not(sets.heartBeatCheck))\r\n    sets.heartBeatCheck = defaultOptions.heartBeatCheck\r\n  if (sets.io) {\r\n    sets.io.on('connection', function(socket) {\r\n      var emit = socket.emit\r\n      socket.emit = function() {\r\n        if (!socket.banned) {\r\n          exports.addSpam(socket)\r\n          emit.apply(socket, arguments)\r\n        }\r\n      }\r\n      authenticate(socket)\r\n\r\n      socket.on('disconnect', function() {\r\n        clearHeart(socket)\r\n      })\r\n\r\n      socket.on('error', function(err) {\r\n        console.error(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  options = sets\r\n}\r\n\r\nexports.addSpam = function(socket) {\r\n  if (not(socket))\r\n    throw new Error('socket variable is not defined')\r\n  authenticate(socket, function(data) {\r\n    if (data.banned)\r\n      return\r\n\r\n    var lastInteraction = moment.duration(moment().diff(data.lastInteraction)).asSeconds()\r\n    data.lastInteraction = moment()\r\n\r\n    if (lastInteraction < 1)\r\n      data.score++\r\n    if (lastInteraction >= 1) {\r\n      var newScore = data.score - Math.round(lastInteraction)\r\n      data.score = newScore\r\n      if (newScore <= 0)\r\n        data.score = 0\r\n    }\r\n\r\n    var lastLowerKick = moment.duration(moment().diff(data.lastLowerKick)).asSeconds()\r\n    if (lastLowerKick >= 1800 && data.kickCount >= 1) {\r\n      data.lastLowerKick = moment()\r\n      data.kickCount--\r\n    }\r\n\r\n    eventEmitter.emit('spamscore', socket, data)\r\n    if (data.score >= options.kickThreshold) {\r\n      eventEmitter.emit('kick', socket, data)\r\n      data.score = 0\r\n      data.kickCount = data.kickCount + 1\r\n      if (data.kickCount >= options.kickTimesBeforeBan && options.banning) {\r\n        eventEmitter.emit('ban', socket, data)\r\n        clearHeart(socket)\r\n        data.kickCount = 0\r\n        data.banned = true\r\n        data.lastLowerKick = moment()\r\n        data.bannedUntil = moment().add(options.banTime, 'minutes')\r\n      }\r\n\r\n      socket.disconnect()\r\n    }\r\n  })\r\n}\r\n\r\nfunction clearHeart(socket) {\r\n  if (!heartbeats[socket.id])\r\n    return\r\n  clearInterval(heartbeats[socket.id].interval)\r\n}\r\n\r\nfunction addHeart(socket) {\r\n  if (heartbeats[socket.id])\r\n    return\r\n  clearHeart(socket)\r\n  heartbeats[socket.id] = {\r\n    interval: setInterval(checkHeart, options.heartBeatCheck * 1000, socket),\r\n  }\r\n}\r\n\r\nfunction checkHeart(socket) {\r\n  if (!heartbeats[socket.id])\r\n    return (clearHeart(socket))\r\n  var startedSince = Math.round(heartbeats[socket.id].interval._idleStart / 1000)\r\n  if (startedSince >= options.heartBeatStale)\r\n    clearHeart(socket)\r\n  authenticate(socket)\r\n}\r\n\r\nfunction authenticate(socket, cb) {\r\n  if (not(socket.ip))\r\n    socket.ip = socket.client.request.headers['x-forwarded-for'] || socket.client.conn.remoteAddress\r\n\r\n  eventEmitter.emit('authenticate', socket)\r\n  if (typeof(users[socket.ip]) == 'undefined') {\r\n    users[socket.ip] = {\r\n      score:           0,\r\n      banned:          false,\r\n      kickCount:       0,\r\n      bannedUntil:     0,\r\n      lastInteraction: moment(),\r\n      lastLowerKick:   moment(),\r\n    }\r\n  }\r\n\r\n  var data = users[socket.ip]\r\n  if (data.banned) {\r\n    data.banned = false\r\n    if (heartbeats[socket.id])\r\n      clearHeart(socket)\r\n    if (data.bannedUntil.diff(moment(), 'seconds') >= 1) {\r\n      data.banned = true\r\n      socket.banned = true\r\n      socket.disconnect()\r\n    }\r\n  }\r\n\r\n  addHeart(socket)\r\n  if (cb)\r\n    cb(data)\r\n}\r\n\r\nexports.ban = function(data, min) {\r\n  if (not(data))\r\n    throw new Error('No options defined')\r\n  if (not(min))\r\n    min = options.banTime\r\n  var ip = false\r\n  if (typeof(users[data]) !='undefined')\r\n    ip = data\r\n  if (typeof(users[data.ip]) != 'undefined')\r\n    ip = data.ip\r\n  if (ip)\r\n    return ban(true, ip)\r\n  return false\r\n}\r\n\r\nexports.unBan = function(data) {\r\n  if (not(data))\r\n    throw new Error('No options defined')\r\n  var ip = false\r\n  if (typeof(users[data])!='undefined')\r\n    ip = data\r\n  if (typeof(users[data.ip])!='undefined')\r\n    ip = data.ip\r\n  if (ip) return ban(false, ip)\r\n  return false\r\n}\r\n\r\nfunction ban(ban, data, min) {\r\n  users[data].kickCount = 0\r\n  users[data].score = 0\r\n  if (ban) {\r\n    users[data].banned = true\r\n    users[data].lastLowerKick = moment()\r\n    users[data].bannedUntil = moment().add(min, 'minutes')\r\n  } else {\r\n    users[data].banned = false\r\n    users[data].lastLowerKick = moment()\r\n    users[data].bannedUntil = 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexports.getBans = function() {\r\n  var banned = []\r\n  var user\r\n  for (user in users) {\r\n    if (users[user].banned)\r\n      banned.push({\r\n        ip:    user,\r\n        until: users[user].bannedUntil,\r\n      })\r\n  }\r\n\r\n  return banned\r\n}\r\n\r\n\r\nexports.event = eventEmitter\r\nexports.antiSpam = exports\r\n","/home/travis/build/npmtest/node-npmtest-socket-anti-spam/node_modules/socket-anti-spam/localtest.js":"// This is the test file for socket-anti-spam. Goto 127.0.0.1 and run this to see it live!\r\n\r\n// Everyone has this line already when using socket-anti-spam\r\nvar io = require('socket.io').listen(8080, {\r\n  log: false,\r\n})\r\n\r\n// This is just for the index.html\r\nvar static = require('node-static')\r\nvar http = require('http')\r\nvar file = new static.Server('./public')\r\n\r\n// Actually needed for antispam\r\nvar antiSpam = require('./antispam')\r\nantiSpam.init({\r\n  banTime: 1,            // Ban time in minutes\r\n  kickThreshold: 7,       // User gets kicked after this many spam score\r\n  kickTimesBeforeBan: 3,  // User gets banned after this many kicks\r\n  banning: true,          // Uses temp IP banning after kickTimesBeforeBan\r\n  heartBeatStale: 40,     // Removes a heartbeat after this many seconds\r\n  heartBeatCheck: 4,      // Checks a heartbeat per this many seconds\r\n  io: io,                  // Bind the socketio variable\r\n})\r\n\r\n// Lets create server for index.html\r\nhttp.createServer(function(req, res) {\r\n  file.serve(req, res)\r\n}).listen(80)\r\n\r\n // Everyone has this line already when using socket-anti-spam\r\nio.sockets.on('connection', function(socket) {\r\n  console.log(antiSpam.getBans())\r\n  socket.join(\"kappa\")\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n  io.sockets.in(\"kappa\").emit('roomer_msg', {kappa:\"kappa\"})\r\n   // Extra socket function for testing purposes so we can spam something :3\r\n  socket.on(\"spamming\", function() {\r\n      socket.emit(\"spamscore\",null)\r\n  })\r\n})\r\n"}